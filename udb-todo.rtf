{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red203\green0\blue77;\red60\green60\blue59;
\red117\green66\blue151;\red9\green76\blue116;\red130\green130\blue130;\red60\green60\blue59;}
{\*\expandedcolortbl;;\csgray\c0;\cssrgb\c84314\c0\c37255;\cssrgb\c30196\c30196\c29804;
\cssrgb\c53725\c34902\c65882;\cssrgb\c0\c37255\c52941;\cssrgb\c58039\c58039\c58039;\cssrgb\c30196\c30196\c29804;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \CocoaLigature0 RUST_BACKTRACE=1 cargo run cores/shopping-debug/app-debug.core cores/shopping-debug/app-debug\
\
https://dwarfstd.org/doc/DWARF5.pdf\

\f1\b \
exe file\

\f0\b0 index  name                type             vaddr  offset  size  entry_size  align  link  info  flags         \
-----  ----                ----             -----  ------  ----  ----------  -----  ----  ----  -----         \
28     .debug_aranges      ProgBits             0  303b    96    0           1      0     0     none          \
29     .debug_info         ProgBits             0  309b   969    0           1      0     0     none          \
30     .debug_abbrev       ProgBits             0  3464   511    0           1      0     0     none          \
31     .debug_line         ProgBits             0  3663   498    0           1      0     0     none          \
32     .debug_str          ProgBits             0  3855   281    1           1      0     0     MERGE STRINGS \
33     .debug_loc          ProgBits             0  396e   480    0           1      0     0     none          \
34     .symtab             SymbolTable          0  3b50  1056   24           8     35    20     none     \
\

\f1\b object file
\f0\b0 \
index  name              type             vaddr  offset  size  entry_size  align  link  info  flags         \
-----  ----              ----             -----  ------  ----  ----------  -----  ----  ----  -----         \
 7  .rela.debug_info     RelocationsWith  0      1060    1248  24          8      20   6      INFO          \
 8  .debug_abbrev        ProgBits         0       655     331   0          1       0   0      none          \
 9  .debug_loc           ProgBits         0       7a0     384   0          1       0   0      none          \
10  .debug_aranges       ProgBits         0       920      48   0          1       0   0      none          \
11  .rela.debug_aranges  RelocationsWith  0      1540      48  24          8      20  10      INFO          \
12  .debug_line          ProgBits         0       950     365   0          1       0   0      none          \
13  .rela.debug_line     RelocationsWith  0      1570      24  24          8      20  12      INFO          \
14  .debug_str           ProgBits         0       abd     331   1          1       0   0      MERGE STRINGS \
\
.debug_frame\
	call frame info\
	don\'92t seem to have this\
	see 6.4\
	\
.debug_line\
	maps instruction pointers to source file, line, col\
	state machine is use to encode this\
	see 6.2\
	\
\pard\pardeftab720\partightenfactor0

\fs40 \cf3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec3 typedef\cf4 \strokec4  \cf3 \strokec3 struct\cf4 \strokec4  \{\
  dwarf_vma  \cf5 \strokec5 li_length\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 short\cf4 \strokec4  \cf5 \strokec5 li_version\cf4 \strokec4 ;\
  dwarf_vma      \cf5 \strokec5 li_prologue_length\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 char\cf4 \strokec4   \cf5 \strokec5 li_min_insn_length\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 char\cf4 \strokec4   \cf5 \strokec5 li_max_ops_per_insn\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 char\cf4 \strokec4   \cf5 \strokec5 li_default_is_stmt\cf4 \strokec4 ;\
  \cf3 \strokec3 int\cf4 \strokec4             \cf5 \strokec5 li_line_base\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 char\cf4 \strokec4   \cf5 \strokec5 li_line_range\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 char\cf4 \strokec4   \cf5 \strokec5 li_opcode_base\cf4 \strokec4 ;\
\} DWARF2_Internal_LineInfo;\

\fs32 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs36 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 	display_debug_lines_raw -> read_debug_line_header\
	display_debug_lines_decoded (uses state machine)\
	\
.debug_aranges    \
	enables look ups by address\
	see 6.1.2 \
	\
Debugging Information Entries (DIEs)\
	these have \
		a tag name\
		list of attributes\
			these have an attribute name\
			values belong to an attribute value form\
				eg address, constant, lineptr, etc\
	DIEs are arranged in a tree\
		a DIE may own an arbitrary number of other DIEs\
	dwarf expressions are encoded as a stream of opcodes\
		opcodes are postfix operations on a stack machine\
		entries on the stack have a type and value\
		\
Contents of the .debug_info section:\
<1><185>: Abbrev Number: 17 (DW_TAG_subprogram)\
    <186>   DW_AT_external    : 1\
    <187>   DW_AT_name        : (indirect string, offset: 0x0): get_name\
    <18b>   DW_AT_decl_file   : 1\
    <18c>   DW_AT_decl_line   : 67\
    <18d>   DW_AT_decl_column : 13\
    <18e>   DW_AT_prototyped  : 1\
    <18f>   DW_AT_type        : <0x14f>\
    <193>   DW_AT_low_pc      : 0x14c0\
    <19b>   DW_AT_high_pc     : 0x14f5\
    <1a3>   DW_AT_frame_base  : 0x0 (location list)\
    <1a7>   DW_AT_GNU_all_call_sites: 1\
    <1a8>   DW_AT_sibling     : <0x1bb>\
<2><1ac>: Abbrev Number: 18 (DW_TAG_formal_parameter)  
\f1\b <== can get function parameters
\f0\b0 \
    <1ad>   DW_AT_name        : id\
    <1b0>   DW_AT_decl_file   : 1\
    <1b1>   DW_AT_decl_line   : 67\
    <1b2>   DW_AT_decl_column : 27\
    <1b3>   DW_AT_type        : <0x6c>\
    <1b7>   DW_AT_location    : 2 byte block: 91 68     (DW_OP_fbreg: -24)\
process_debug_info		 https://chromium.googlesource.com/native_client/nacl-binutils/+/upstream/master/binutils/dwarf.c\
	names come from read_and_display_attr\
	\
	length or escape + length\
	\
	
\fs32 \cf6 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec6 frame_display_row
\fs36 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 ?\
	
\fs32 \cf6 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec6 read_and_display_attr
\fs36 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 ?  think this is it: display_debug_info calls process_debug_info\
	\
\pard\pardeftab720\partightenfactor0

\fs40 \cf3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec3 typedef\cf4 \strokec4  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf5 \strokec5 HOST_WIDEST_INT\cf4 \strokec4   \cf5 \strokec5 dwarf_vma\cf4 \strokec4 ;\
\

\fs42 \cf3 \strokec3 typedef\cf4 \strokec4  \cf3 \strokec3 struct\cf4 \strokec4 \
\{\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 int\cf4 \strokec4    \cf5 \strokec5 pointer_size\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 int\cf4 \strokec4    \cf5 \strokec5 offset_size\cf4 \strokec4 ;\
  \cf3 \strokec3 int\cf4 \strokec4             \cf5 \strokec5 dwarf_version\cf4 \strokec4 ;\
  dwarf_vma  \cf5 \strokec5 cu_offset\cf4 \strokec4 ;\
  dwarf_vma  \cf5 \strokec5 base_address\cf4 \strokec4 ;\
\cf7 \strokec7   /* This field is filled in when reading the attribute DW_AT_GNU_addr_base and\cf4 \strokec4 \
\cf7 \strokec7      is used with the form DW_AT_GNU_FORM_addr_index.  */\cf4 \strokec4 \
  dwarf_vma  \cf5 \strokec5 addr_base\cf4 \strokec4 ;\
\cf7 \strokec7   /* This field is filled in when reading the attribute DW_AT_GNU_ranges_base and\cf4 \strokec4 \
\cf7 \strokec7      is used when calculating ranges.  */\cf4 \strokec4 \
  dwarf_vma  \cf5 \strokec5 ranges_base\cf4 \strokec4 ;\
\cf7 \strokec7   /* This is an array of offsets to the location list table.  */\cf4 \strokec4 \
  dwarf_vma \cf3 \strokec3 *\cf4 \strokec4     \cf5 \strokec5 loc_offsets\cf4 \strokec4 ;\
  \cf3 \strokec3 int\cf4 \strokec4  \cf3 \strokec3 *\cf4 \strokec4           \cf5 \strokec5 have_frame_base\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 int\cf4 \strokec4    \cf5 \strokec5 num_loc_offsets\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 int\cf4 \strokec4    \cf5 \strokec5 max_loc_offsets\cf4 \strokec4 ;\
\cf7 \strokec7   /* List of .debug_ranges offsets seen in this .debug_info.  */\cf4 \strokec4 \
  dwarf_vma \cf3 \strokec3 *\cf4 \strokec4     \cf5 \strokec5 range_lists\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 int\cf4 \strokec4    \cf5 \strokec5 num_range_lists\cf4 \strokec4 ;\
  \cf3 \strokec3 unsigned\cf4 \strokec4  \cf3 \strokec3 int\cf4 \strokec4    \cf5 \strokec5 max_range_lists\cf4 \strokec4 ;\
\} debug_info;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs36 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 	\
0x1500 at 5:12\
0x150d at 6:9\
0x1514 at 8:5\
0x151e at 9:5\
0x1528 at 10:5\
0x1532 at 11:5\
0x153c at 13:5\
0x1546 at 14:5\
0x1550 at 15:5\
0x155a at 17:11\
0x
\f1\b 155c at 18:17   
\f0\b0 example of a relatively complex line
\f1\b \

\f0\b0 0x
\f1\b 1568 at 18:39\

\f0\b0 0x
\f1\b 1572 at 18:37\

\f0\b0 0x
\f1\b 1575 at 18:14\

\f0\b0 0x1578 at 17:17\
0x1581 at 21:5\
0x15aa at 22:12\
0x15af at 23:1\
0x15b5 at 23:1\
\pard\pardeftab720\partightenfactor0

\f1\b \
add a StringView type\
	need to make ElfFile(s) or the memmap a static ref\
	then StringView can have a static ref to that along with an offset\
	maybe length too\
work on debg_lines parsing\
	how do we expose the state machine?\
		interval crate?\
		can we have a map from interval to string view file name/line/col struct?\
		add a command to find line given virtual address\
	add a command to dump line info\
		probably want a --raw option\
	use a state machine to get something more useful\
		figure out how to expose this? hash map? struct with some methods?\
	dump line info should print this somehow\
	bt should use this to provide file/line\
		fn name too?\
figure out how to map symbol values to virtual addresses\
	may want an option for this\
figure out how to get function names and lines from from bt\
	can use load segment and symbols to get function names\
	readelf --debug-dump=decodedline associates offsets with file and line numbers\
would be nice to get a basic print working\
	especially some simple math and hex <-> dec conversions\
	\
	
\f0\b0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf8 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs36 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf7 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec7 // TODO\cf4 \strokec4 \
\cf7 \strokec7 // can we get the function parameters?\cf4 \strokec4 \
\cf7 \strokec7 // need a test for not a core file\cf4 \strokec4 \
\cf7 \strokec7 // should be able to run a command from bash\cf4 \strokec4 \
\cf7 \strokec7 //    maybe allow them to be chained somehow\cf4 \strokec4 \
\cf7 \strokec7 // add tests for command output?\cf4 \strokec4 \
\cf7 \strokec7 //    have to be careful with changeable stuff like addresses\cf4 \strokec4 \
\cf7 \strokec7 //    or is it better to have tests for the backend data?\cf4 \strokec4 \
\cf7 \strokec7 //       that's probably more stable\cf4 \strokec4 \
\cf7 \strokec7 //       tho it means the formatted output isnt tested...\cf4 \strokec4 \
\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 16754102765722794108}